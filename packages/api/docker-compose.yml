services:
  jeeves-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./eslint.config.mjs:/app/eslint.config.mjs
      - /app/node_modules  # Anonymous volume to prevent overwriting
    env_file:
      - .env
    environment:
      # Override database URL to use postgres container
      - DATABASE_URL=postgresql://jeeves_app:jeeves_pass@jeeves-postgres:5432/jeeves
      # Override Redis URL to use redis container
      - REDIS_URL=redis://jeeves-redis:6379
      - TZ=UTC
    depends_on:
      jeeves-postgres:
        condition: service_healthy
      jeeves-redis:
        condition: service_healthy
    networks:
      - jeeves-network
  jeeves-postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=jeeves
      - POSTGRES_USER=jeeves_app
      - POSTGRES_PASSWORD=jeeves_pass
      - TZ=UTC
      - PGTZ=UTC
    command: |
      postgres
      -c shared_preload_libraries=pg_cron
      -c cron.database_name=jeeves
      -c wal_level=logical
    volumes:
      - jeeves_postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jeeves_app -d jeeves"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - jeeves-network
  jeeves-redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - jeeves_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - jeeves-network

volumes:
  jeeves_postgres_data:
  jeeves_redis_data:

networks:
  jeeves-network:
    driver: bridge